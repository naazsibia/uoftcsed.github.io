@inproceedings{06Kazemitabaar22,
author = {Majeed Kazemitabaar and Viktar Chyhir and David Weintrop and Tovi Grossman},
title = {CodeStruct: Design and Evaluation of an Intermediary Programming Environment for Novices to Transition from Scratch to Python},
year = {2022},
isbn = {9781450391979},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3501712.3529733},
doi = {10.1145/3501712.3529733},
abstract = {Transitioning from block-based programming environments to conventional text-based programming languages is a challenge faced by many learners as they progress in their computer science education. In this paper, we introduce CodeStruct, a new intermediary programming environment for novices designed to support children who have prior experience with block-based programming to ease the eventual transition to text-based programming. We describe the development of CodeStruct and its key design features. We then present the results from a two-week long programming class with 26 high school students (ages 12-16; M=14 years) investigating how CodeStruct supported learners in transitioning from Scratch to Python. Our findings reveal how learners used the scaffolds designed into CodeStruct to support their transition from blocks to text, and that transitioning to CodeStruct reduced completion time (1.98x) and help requests (4.63x) when compared to transitioning directly to Python. Finally, learners that used CodeStruct, performed equally well (and slightly better in 10/16 programming activities) in their final transition to fully text-based Python programming.},
booktitle = {Interaction Design and Children},
pages = {261–273},
numpages = {13},
keywords = {blocks-to-text transition, block-based programming, high school computer science education},
location = {Braga, Portugal},
series = {IDC '22}
}

@inproceedings{04Kazemitabaar23,
author = {Majeed Kazemitabaar and Justin Chow and Carl Ka To Ma and Barbara J. Ericson and David Weintrop and Tovi Grossman},
title = {Studying the Effect of AI Code Generators on Supporting Novice Learners in Introductory Programming},
year = {2023},
isbn = {9781450394215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3544548.3580919},
doi = {10.1145/3544548.3580919},
abstract = {AI code generators like OpenAI Codex have the potential to assist novice programmers by generating code from natural language descriptions, however, over-reliance might negatively impact learning and retention. To explore the implications that AI code generators have on introductory programming, we conducted a controlled experiment with 69 novices (ages 10-17). Learners worked on 45 Python code-authoring tasks, for which half of the learners had access to Codex, each followed by a code-modification task. Our results show that using Codex significantly increased code-authoring performance (1.15x increased completion rate and 1.8x higher scores) while not decreasing performance on manual code-modification tasks. Additionally, learners with access to Codex during the training phase performed slightly better on the evaluation post-tests conducted one week later, although this difference did not reach statistical significance. Of interest, learners with higher Scratch pre-test scores performed significantly better on retention post-tests, if they had prior access to Codex.},
booktitle = {Proceedings of the 2023 CHI Conference on Human Factors in Computing Systems},
articleno = {455},
numpages = {23},
keywords = {Introductory Programming, AI Coding Assistants, ChatGPT, Large Language Models, GPT-3, AI-Assisted Pair-Programming, K-12 Computer Science Education, Copilot, OpenAI Codex},
location = {Hamburg, Germany},
series = {CHI '23}
}

inproceedings{03Grossman23,
author = {Majeed Kazemitabaar and Viktar Chyhir and David Weintrop and Tovi Grossman},
title = {Scaffolding Progress: How Structured Editors Shape Novice Errors When Transitioning from Blocks to Text},
year = {2023},
isbn = {9781450394314},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545945.3569723},
doi = {10.1145/3545945.3569723},
abstract = {Transitioning from block-based programming environments to text-based programming environments can be challenging as it requires students to learn new programming language concepts. In this paper, we identify and classify the issues encountered when transitioning from block-based to text-based programming. In particular, we investigate differences that emerge in learners when using a structured editor compared to an unstructured editor. We followed 26 high school students (ages 12-16; M=14 years) as they transitioned from Scratch to Python in three phases: (i) learning Scratch, (ii) transitioning from Scratch to Python using either a structured or unstructured editor, and (iii) evaluating Python coding skills using an unstructured editor. We identify 27 distinct types of issues and show that learners who used a structured editor during the transition phase had 4.6x less syntax issues and 1.9x less data-type issues compared to those who did not. When these learners switched to an unstructured editor for evaluation, they kept a lower rate on data-type issues but faced 4x more syntax errors.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 1},
pages = {556–562},
numpages = {7},
keywords = {transition, structured editors, blocks-to-text, thematic analysis, high school programming, challenges, novices},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}
